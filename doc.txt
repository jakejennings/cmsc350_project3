public static void inorderTraversal(TreeNode root, boolean isLastNode) {
    if (root != null) {
        boolean hasChildren = (root.left != null || root.right != null);
        if (hasChildren) {
            System.out.print("(");
        }
        inorderTraversal(root.left, false);
        if (hasChildren) {
            System.out.print(")");
        }
        System.out.print(root.val);
        if (hasChildren && !isLastNode) {
            System.out.print("(");
        }
        inorderTraversal(root.right, isLastNode);
        if (hasChildren && !isLastNode) {
            System.out.print(")");
        }
    }
}
class TreeNode {
    char val;
    TreeNode left;
    TreeNode right;
    TreeNode(char x) { val = x; }

    public int getNodeCount() {
        int leftCount = (left == null) ? 0 : left.getNodeCount();
        int rightCount = (right == null) ? 0 : right.getNodeCount();
        return 1 + leftCount + rightCount;
    }
}
class TreeNode {
    char val;
    TreeNode left;
    TreeNode right;
    TreeNode(char x) { val = x; }

    public int getHeight() {
        int leftHeight = (left == null) ? 0 : left.getHeight() + 1;
        int rightHeight = (right == null) ? 0 : right.getHeight() + 1;
        return Math.max(leftHeight, rightHeight);
    }
}
class TreeNode {
    char val;
    TreeNode left;
    TreeNode right;
    TreeNode(char x) { val = x; }

    public int getDepth() {
        int leftDepth = (left == null) ? 0 : left.getDepth();
        int rightDepth = (right == null) ? 0 : right.getDepth();
        return 1 + Math.max(leftDepth, rightDepth);
    }
}
class TreeNode {
    char val;
    TreeNode left;
    TreeNode right;
    TreeNode(char x) { val = x; }
}

public class BinaryTreeFromString {
    public static TreeNode str2tree(String s) {
        if (s.isEmpty()) {
            return null;
        }
        int firstParen = s.indexOf("(");
        char val = (firstParen == -1) ? s.charAt(0) : s.charAt(0);
        TreeNode root = new TreeNode(val);
        if (firstParen == -1) {
            return root;
        }
        int start = firstParen, leftParenCount = 0;
        for (int i = start; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                leftParenCount++;
            } else if (s.charAt(i) == ')') {
                leftParenCount--;
            }
            if (leftParenCount == 0 && start == firstParen) {
                root.left = str2tree(s.substring(start + 1, i));
                start = i + 1;
            } else if (leftParenCount == 0) {
                root.right = str2tree(s.substring(start + 1, i));
            }
        }
        return root;
    }

    public static void inorderTraversal(TreeNode root) {
        if (root != null) {
            inorderTraversal(root.left);
            System.out.print(root.val + " ");
            inorderTraversal(root.right);
        }
    }

    public static void main(String[] args) {
        String s = "(A(B(C)(D))(E(F)(G)))";
        TreeNode root = str2tree(s);
        inorderTraversal(root); // Output: C B D A F E G
    }
}
(A(G(j)(1))(z(5)))
(A(G(j)(1))(z(5)(B)))
(1(c(3)(G)))
(A(G(j)(1))(z))
(1(3)(G))
(A(x(1)(3))(y(2)(4)))
(A(B))
(A(B(1)(2))(C(3)))
(A(B(1)(2))(C(3)(4)))
(K(D)(1))
(K(D)(1(B)))
(A(x(1)(3))(y(2)))
(A(G(j)(1(3)(4)))(z(5)(7)))

(A(x(1)(3))(y(2))
A
(A(B)
Hello World
(A(G(j)(1))(z(-6)
(A(G(j)(1))(z)(-6)